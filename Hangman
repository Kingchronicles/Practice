{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Kingchronicles/Practice/blob/main/Hangman_Final_Project.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive', force_remount=True)"
      ],
      "metadata": {
        "id": "XtzF_hEykjrd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8b773f6c-4248-46bd-b13e-31f72a462667"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Helper Code"
      ],
      "metadata": {
        "id": "wOeBaQrnJZmA"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "3HWNi2cJJMuf"
      },
      "outputs": [],
      "source": [
        "import random\n",
        "import string\n",
        "\n",
        "WORDLIST_FILENAME = \"/content/drive/MyDrive/Colab Notebooks/Downloaded files/words.txt\"\n",
        "\n",
        "\n",
        "def load_words():\n",
        "    \"\"\"\n",
        "    Returns a list of valid words. Words are strings of lowercase letters.\n",
        "\n",
        "    Depending on the size of the word list, this function may\n",
        "    take a while to finish.\n",
        "    \"\"\"\n",
        "    print(\"Loading word list from file...\")\n",
        "    # inFile: file\n",
        "    inFile = open(WORDLIST_FILENAME, 'r')\n",
        "    # line: string\n",
        "    line = inFile.readline()\n",
        "    # wordlist: list of strings\n",
        "    wordlist = line.split()\n",
        "    print(\"  \", len(wordlist), \"words loaded.\")\n",
        "    return wordlist\n",
        "\n",
        "\n",
        "\n",
        "def choose_word(wordlist):\n",
        "    \"\"\"\n",
        "    wordlist (list): list of words (strings)\n",
        "\n",
        "    Returns a word from wordlist at random\n",
        "    \"\"\"\n",
        "    return random.choice(wordlist)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Helper Function"
      ],
      "metadata": {
        "id": "2ZSrhhN7Jbj-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Load the list of words into the variable wordlist\n",
        "# so that it can be accessed from anywhere in the program\n",
        "wordlist = load_words()"
      ],
      "metadata": {
        "id": "D6yv04fuJd93",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d0b738a6-eaa3-4a69-c8b5-025360a14b80"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loading word list from file...\n",
            "   55900 words loaded.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## First Helper Function to implement"
      ],
      "metadata": {
        "id": "lC5Y2ig4JhuM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def is_word_guessed(secret_word, letters_guessed):\n",
        "    '''\n",
        "    secret_word: string, the word the user is guessing; assumes all letters are\n",
        "      lowercase\n",
        "    letters_guessed: list (of letters), which letters have been guessed so far;\n",
        "      assumes that all letters are lowercase\n",
        "    returns: boolean, True if all the letters of secret_word are in letters_guessed;\n",
        "      False otherwise\n",
        "    '''\n",
        "    # FILL IN YOUR CODE HERE AND DELETE \"pass\"\n",
        "    for i in secret_word:\n",
        "      if i not in letters_guessed:\n",
        "        return False\n",
        "    return True"
      ],
      "metadata": {
        "id": "YC4Po3ylJket"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "secret_word = 'apple'\n",
        "letters_guessed = ['e', 'i', 'k', 'p', 'r', 's']\n",
        "print(is_word_guessed(secret_word, letters_guessed))"
      ],
      "metadata": {
        "id": "L-juWgeU21jE",
        "outputId": "767da896-f106-44ac-f1d6-b6ea438be7d1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Second Helper Function to implement"
      ],
      "metadata": {
        "id": "4PtrgWIXJlv4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from re import I\n",
        "def get_guessed_word(secret_word, letters_guessed):\n",
        "    '''\n",
        "    secret_word: string, the word the user is guessing\n",
        "    letters_guessed: list (of letters), which letters have been guessed so far\n",
        "    returns: string, comprised of letters, underscores (_), and spaces that represents\n",
        "      which letters in secret_word have been guessed so far.\n",
        "    '''\n",
        "\n",
        "    length = len(secret_word)\n",
        "    secret = [\"_ \"] * length\n",
        "    for i in range(length):\n",
        "      if secret_word[i] in letters_guessed:\n",
        "        pos = i\n",
        "        for j in range(length):\n",
        "          if(pos == j):\n",
        "            secret[pos] = secret_word[i] + ' '\n",
        "    return(''.join(secret))"
      ],
      "metadata": {
        "id": "T1_NKT79JqHS"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "get_guessed_word('apple', ['p','a', 'l'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "G4gIx5v2sqE7",
        "outputId": "0de16a96-0c67-4cab-a34d-5ef727433f2d"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'a p p l _ '"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Third Helper Function to implement"
      ],
      "metadata": {
        "id": "_JXQ1eZUJrgG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def get_available_letters(letters_guessed):\n",
        "    '''\n",
        "    letters_guessed: list (of letters), which letters have been guessed so far\n",
        "    returns: string (of letters), comprised of letters that represents which letters have not\n",
        "      yet been guessed.\n",
        "    '''\n",
        "    # FILL IN YOUR CODE HERE AND DELETE \"pass\"\n",
        "    letters = \"abcdefghijklmnopqrstuvwxyz\"\n",
        "    listLetters = \"\"\n",
        "    for i in letters:\n",
        "      if i not in letters_guessed:\n",
        "        listLetters = listLetters + i\n",
        "    return(listLetters)"
      ],
      "metadata": {
        "id": "RoIRZvKWJu7A"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "get_available_letters(['a', 'b', 'h'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "wtpg796sn4B4",
        "outputId": "2ae23acd-c1fa-4d87-f507-246b1266dd66"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'cdefgijklmnopqrstuvwxyz'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Hangman Game"
      ],
      "metadata": {
        "id": "cMDX_lDQJwO6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def hangman():\n",
        "    '''\n",
        "    secret_word: string, the secret word to guess.\n",
        "\n",
        "    Starts up an interactive game of Hangman.\n",
        "\n",
        "    * At the start of the game, let the user know how many\n",
        "      letters the secret_word contains and how many guesses s/he starts with.\n",
        "\n",
        "    * The user should start with 6 guesses\n",
        "\n",
        "    * Before each round, you should display to the user how many guesses\n",
        "      s/he has left and the letters that the user has not yet guessed.\n",
        "\n",
        "    * Ask the user to supply one guess per round. Remember to make\n",
        "      sure that the user puts in a letter!\n",
        "\n",
        "    * The user should receive feedback immediately after each guess\n",
        "      about whether their guess appears in the computer's word.\n",
        "\n",
        "    * After each guess, you should display to the user the\n",
        "      partially guessed word so far.\n",
        "\n",
        "    Follows the other limitations detailed in the problem write-up.\n",
        "    '''\n",
        "\n",
        "    load_words()\n",
        "    secret_word = choose_word(wordlist)\n",
        "    letters_guessed = []\n",
        "    numGuess = 6\n",
        "    warning = 3\n",
        "    length = len(secret_word)\n",
        "    score = 0\n",
        "    unique_letters = 0\n",
        "    print(\"Welcome to the game hangman!\")\n",
        "    print(f\"The secret word contains {length} letters\")\n",
        "    print(f\"You have {warning} warnings left\")\n",
        "    print(\"----------------------------------\")\n",
        "    while(True):\n",
        "      print(f\"You have {numGuess} guesses left\")\n",
        "      print(\"Your Available Letters: \", get_available_letters(letters_guessed))\n",
        "      guess = input(\"Please guess a letter: \").lower()\n",
        "      if(len(guess) != 1):\n",
        "        print(\"Please enter only one letter\")\n",
        "        warning -= 1\n",
        "        if warning < 0:\n",
        "          print(f\"Sorry you ran out of warnings. The word is {secret_word}\")\n",
        "          break\n",
        "        else:\n",
        "          print(f\"You have {warning} warnings left\")\n",
        "          print(\"----------------------------------\")\n",
        "      elif(guess not in \"abcdefghijklmnopqrstuvwxyz\"):\n",
        "        print(\"Oops! That is not a valid letter.\")\n",
        "        warning -= 1\n",
        "        if warning < 0:\n",
        "          print(f\"Sorry you ran out of warnings. The word is {secret_word}\")\n",
        "          break\n",
        "        else:\n",
        "          print(f\"You have {warning} warnings left\")\n",
        "          print(\"----------------------------------\")\n",
        "      else:\n",
        "        guessInLowerCase = guess.lower()\n",
        "        if(guessInLowerCase in secret_word and guessInLowerCase not in letters_guessed):\n",
        "          letters_guessed.append(guessInLowerCase)\n",
        "          unique_letters += 1\n",
        "          print(\"Good Guess:\", get_guessed_word(secret_word, letters_guessed))\n",
        "          print(\"----------------------------------\")\n",
        "        elif(guessInLowerCase in letters_guessed):\n",
        "          print(f\"Oops! {guessInLowerCase} has been guessed before\", get_guessed_word(secret_word, letters_guessed))\n",
        "          warning -= 1\n",
        "          if warning < 0:\n",
        "            print(f\"Sorry you ran out of warnings. The word is {secret_word}\")\n",
        "            break\n",
        "          else:\n",
        "            print(f\"You have {warning} warnings left\")\n",
        "            print(\"----------------------------------\")\n",
        "        else:\n",
        "          print(f\"Oops! {guessInLowerCase} is not in my word\", get_guessed_word(secret_word, letters_guessed))\n",
        "          letters_guessed.append(guessInLowerCase)\n",
        "          numGuess = numGuess-1\n",
        "          print(\"----------------------------------\")\n",
        "        if(is_word_guessed(secret_word, letters_guessed) == True):\n",
        "          print(\"Congratulations, you have won!\")\n",
        "          score = numGuess * unique_letters\n",
        "          print(f\"Your total score for this game is: {score}\")\n",
        "          break\n",
        "        if numGuess == 0:\n",
        "          print(f\"Sorry you ran out of guesses. The word is {secret_word}\")\n",
        "          break"
      ],
      "metadata": {
        "id": "EZYLOr06Jx9l"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "hangman()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tBI9jGEG7XxM",
        "outputId": "58854b88-b97c-4141-f7aa-c0a8b19c89fe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loading word list from file...\n",
            "   55900 words loaded.\n",
            "Welcome to the game hangman!\n",
            "The secret word contains 4 letters\n",
            "You have 3 warnings left\n",
            "----------------------------------\n",
            "You have 6 guesses left\n",
            "Your Available Letters:  abcdefghijklmnopqrstuvwxyz\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "hangman()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "64u8uIma7tN3",
        "outputId": "f9d7a928-7f6e-4211-8752-1f8c50b368d9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loading word list from file...\n",
            "   55900 words loaded.\n",
            "Welcome to the game hangman!\n",
            "The secret word contains 9 letters\n",
            "You have 3 warnings left\n",
            "----------------------------------\n",
            "You have 6 guesses left\n",
            "Your Available Letters:  abcdefghijklmnopqrstuvwxyz\n",
            "Please guess a letter: $\n",
            "Oops! That is not a valid letter.\n",
            "You have 2 warnings left\n",
            "----------------------------------\n",
            "You have 6 guesses left\n",
            "Your Available Letters:  abcdefghijklmnopqrstuvwxyz\n",
            "Please guess a letter: aa\n",
            "Please enter only one letter\n",
            "You have 1 warnings left\n",
            "----------------------------------\n",
            "You have 6 guesses left\n",
            "Your Available Letters:  abcdefghijklmnopqrstuvwxyz\n",
            "Please guess a letter: i\n",
            "Oops! i is not in my word _ _ _ _ _ _ _ _ _ \n",
            "----------------------------------\n",
            "You have 5 guesses left\n",
            "Your Available Letters:  abcdefghjklmnopqrstuvwxyz\n",
            "Please guess a letter: i\n",
            "Oops! i has been guessed before _ _ _ _ _ _ _ _ _ \n",
            "You have 0 warnings left\n",
            "----------------------------------\n",
            "You have 5 guesses left\n",
            "Your Available Letters:  abcdefghjklmnopqrstuvwxyz\n",
            "Please guess a letter: %\n",
            "Oops! That is not a valid letter.\n",
            "Sorry you ran out of warnings. The word is banquette\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "hangman()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jeiqcZgmkjba",
        "outputId": "2be56c4f-20af-4282-ae78-9b745ee9e002"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loading word list from file...\n",
            "   55900 words loaded.\n",
            "Welcome to the game hangman!\n",
            "The secret word contains 9 letters\n",
            "You have 3 warnings left\n",
            "----------------------------------\n",
            "You have 6 guesses left\n",
            "Your Available Letters:  abcdefghijklmnopqrstuvwxyz\n",
            "Please guess a letter: h\n",
            "Oops! h is not in my word _ _ _ _ _ _ _ _ _ \n",
            "----------------------------------\n",
            "You have 5 guesses left\n",
            "Your Available Letters:  abcdefgijklmnopqrstuvwxyz\n",
            "Please guess a letter: h\n",
            "Oops! h has been guessed before _ _ _ _ _ _ _ _ _ \n",
            "You have 2 warnings left\n",
            "----------------------------------\n",
            "You have 5 guesses left\n",
            "Your Available Letters:  abcdefgijklmnopqrstuvwxyz\n",
            "Please guess a letter: h\n",
            "Oops! h has been guessed before _ _ _ _ _ _ _ _ _ \n",
            "You have 1 warnings left\n",
            "----------------------------------\n",
            "You have 5 guesses left\n",
            "Your Available Letters:  abcdefgijklmnopqrstuvwxyz\n",
            "Please guess a letter: h\n",
            "Oops! h has been guessed before _ _ _ _ _ _ _ _ _ \n",
            "You have 0 warnings left\n",
            "----------------------------------\n",
            "You have 5 guesses left\n",
            "Your Available Letters:  abcdefgijklmnopqrstuvwxyz\n",
            "Please guess a letter: $\n",
            "Oops! That is not a valid letter.\n",
            "Sorry you ran out of warnings. The word is storybook\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "hangman()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aiD6FLzLxwMV",
        "outputId": "c3517d55-ffa3-4a4e-8a98-718be25a995f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loading word list from file...\n",
            "   55900 words loaded.\n",
            "Welcome to the game hangman!\n",
            "The secret word contains 8 letters\n",
            "You have 3 warnings left\n",
            "----------------------------------\n",
            "You have 6 guesses left\n",
            "Your Available Letters:  abcdefghijklmnopqrstuvwxyz\n",
            "Please guess a letter: a\n",
            "Good Guess: _ _ _ a _ _ _ _ \n",
            "----------------------------------\n",
            "You have 6 guesses left\n",
            "Your Available Letters:  bcdefghijklmnopqrstuvwxyz\n",
            "Please guess a letter: t\n",
            "Oops! t is not in my word _ _ _ a _ _ _ _ \n",
            "----------------------------------\n",
            "You have 5 guesses left\n",
            "Your Available Letters:  bcdefghijklmnopqrsuvwxyz\n",
            "Please guess a letter: l\n",
            "Oops! l is not in my word _ _ _ a _ _ _ _ \n",
            "----------------------------------\n",
            "You have 4 guesses left\n",
            "Your Available Letters:  bcdefghijkmnopqrsuvwxyz\n",
            "Please guess a letter: w\n",
            "Oops! w is not in my word _ _ _ a _ _ _ _ \n",
            "----------------------------------\n",
            "You have 3 guesses left\n",
            "Your Available Letters:  bcdefghijkmnopqrsuvxyz\n",
            "Please guess a letter: e\n",
            "Good Guess: _ e _ a _ _ e _ \n",
            "----------------------------------\n",
            "You have 3 guesses left\n",
            "Your Available Letters:  bcdfghijkmnopqrsuvxyz\n",
            "Please guess a letter: h\n",
            "Oops! h is not in my word _ e _ a _ _ e _ \n",
            "----------------------------------\n",
            "You have 2 guesses left\n",
            "Your Available Letters:  bcdfgijkmnopqrsuvxyz\n",
            "Please guess a letter: f\n",
            "Oops! f is not in my word _ e _ a _ _ e _ \n",
            "----------------------------------\n",
            "You have 1 guesses left\n",
            "Your Available Letters:  bcdgijkmnopqrsuvxyz\n",
            "Please guess a letter: p\n",
            "Oops! p is not in my word _ e _ a _ _ e _ \n",
            "----------------------------------\n",
            "Sorry you ran out of guesses. The word is regarded\n"
          ]
        }
      ]
    }
  ]
}
